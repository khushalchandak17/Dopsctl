#!/bin/bash

# Define version
VERSION="Alpha 1.0"

# Check if the script is run as root
if [ "$(id -u)" != "0" ]; then
  echo "This script must be run as root" 1>&2
  exit 1
fi

# Get the full path to the directory containing this script
SCRIPT_DIR="/var/dopsctl"
export SCRIPT_DIR

# Function to execute the selected script
execute_script() {
  script_name=$1
  script_path="$SCRIPT_DIR/data/$script_name"

  if [ -f "$script_path" ]; then
    if [ -x "$script_path" ]; then
      whiptail --title "Executing Script" --msgbox "Executing $script_name..." 10 50
      bash "$script_path"
    else
      whiptail --title "Error" --msgbox "The script $script_path is not executable.\nPlease ensure it has the execute permission." 10 50
    fi
  else
    whiptail --title "Error" --msgbox "The script $script_name is not present.\nFeature not integrated." 10 50
  fi
}

# Main menu for selecting sections
main_menu() {
  SECTION=$(whiptail --title "Dopsctl (Version $VERSION)" --menu "Choose a section:" 20 70 12 \
    "A" "Install Kubernetes" \
    "B" "Install Rancher" \
    "C" "Container Runtime" \
    "D" "Utility" \
    "E" "Services" \
    "F" "Fetch Cluster Insight" \
    "G" "Quick Rancher Deploy" \
    "H" "Log Collector" \
    "I" "Troubleshoot" \
    "Q" "Quit" 3>&1 1>&2 2>&3)

  if [ $? != 0 ]; then
    echo "Exiting..."
    exit 0
  fi

  case $SECTION in
    A) kubernetes_menu ;;
    B) rancher_menu ;;
    C) container_runtime_menu ;;
    D) utility_menu ;;
    E) services_menu ;;
    F) fetch_data_menu ;;
    G) quick_rancher_menu ;;
    H) log_data_menu ;;
    I) troubleshoot_menu ;;
    Q) exit 0 ;;
    *) main_menu ;;
  esac
}

# Submenu for Kubernetes
kubernetes_menu() {
  OPTION=$(whiptail --title "Kubernetes Menu" --menu "Choose an option:" 15 50 5 \
    "1" "Install rke" \
    "V" "Install rke2" \
    "3" "Install k3s" \
    "4" "Install Kubernetes" \
    "M" "Main Menu" 3>&1 1>&2 2>&3)

  if [ $? != 0 ]; then
    main_menu
  fi

  case $OPTION in
    1) execute_script "install_rke.sh" ;;
    V) execute_script "install_rke2.sh" ;;
    3) execute_script "install_k3s.sh" ;;
    4) execute_script "install_kubernetes.sh" ;;
    M) main_menu ;;
    *) kubernetes_menu ;;
  esac
}

# Submenu for Rancher
rancher_menu() {
  OPTION=$(whiptail --title "Rancher Menu" --menu "Choose an option:" 15 50 5 \
    "1" "Install Rancher via Helm" \
    "2" "Install Rancher via Docker" \
    "3" "Install Rancher Prime" \
    "M" "Main Menu" 3>&1 1>&2 2>&3)

  if [ $? != 0 ]; then
    main_menu
  fi

  case $OPTION in
    1) execute_script "rancher_helm.sh" ;;
    2) execute_script "install_rancher_manager_with_docker.sh" ;;
    3) execute_script "install_rancher_prime.sh" ;;
    M) main_menu ;;
    *) rancher_menu ;;
  esac
}

# Submenu for Container Runtime
container_runtime_menu() {
  OPTION=$(whiptail --title "Container Runtime Menu" --menu "Choose an option:" 15 50 5 \
    "1" "Install Docker" \
    "2" "Install containerd" \
    "3" "Install crio" \
    "4" "Install podman" \
    "M" "Main Menu" 3>&1 1>&2 2>&3)

  if [ $? != 0 ]; then
    main_menu
  fi

  case $OPTION in
    1) execute_script "install_docker.sh" ;;
    2) execute_script "install_containerd.sh" ;;
    3) execute_script "install_crio.sh" ;;
    4) execute_script "install_podman.sh" ;;
    M) main_menu ;;
    *) container_runtime_menu ;;
  esac
}

# Submenu for Utility
utility_menu() {
  OPTION=$(whiptail --title "Utility Menu" --menu "Choose an option:" 15 50 5 \
    "1" "Install kubectl" \
    "2" "Install Helm" \
    "M" "Main Menu" 3>&1 1>&2 2>&3)

  if [ $? != 0 ]; then
    main_menu
  fi

  case $OPTION in
    1) execute_script "install_kubectl.sh" ;;
    2) execute_script "install_helm.sh" ;;
    M) main_menu ;;
    *) utility_menu ;;
  esac
}

# Submenu for Services
services_menu() {
  OPTION=$(whiptail --title "Services Menu" --menu "Choose an option:" 15 50 5 \
    "1" "Deploy DNS Server" \
    "2" "Deploy Proxy" \
    "3" "Deploy Private Image Registry" \
    "M" "Main Menu" 3>&1 1>&2 2>&3)

  if [ $? != 0 ]; then
    main_menu
  fi

  case $OPTION in
    1) execute_script "deploy_dns_server.sh" ;;
    2) execute_script "deploy_proxy.sh" ;;
    3) execute_script "deploy_private_registry.sh" ;;
    M) main_menu ;;
    *) services_menu ;;
  esac
}

# Version handling
if [[ $1 == "--version" ]]; then
  echo "dopsctl version $VERSION"
  exit 0
fi

# Start the main menu
main_menu

